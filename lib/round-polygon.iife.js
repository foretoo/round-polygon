var roundPolygon=function(){"use strict";const h=(e,n)=>Math.sqrt(Math.pow(n.x-e.x,2)+Math.pow(n.y-e.y,2)),d=(e,n,g)=>{if(g){const l=h(e,n),t=h(n,g),a=h(g,e);return Math.acos((l*l+t*t-a*a)/(2*l*t))}else return Math.atan2(n.y-e.y,n.x-e.x)},v=Math.PI,M=v*2,k=(e,n)=>{const g=n-e;return g>v&&g<M||g<0&&g>-v?-1:1},c=(e,n,g)=>{const l=d(e,n,g),t=d(n,e),a=d(n,g),s=1/Math.tan(l/2),f=k(t,a),i=t+f*l/2;return{main:l,next:a,prev:t,vel:s,dir:f,bis:i}};let o;const m=(e,n)=>{o=e.length;const g=e.map((t,a)=>{const s=e[(a-1+e.length)%e.length],f=e[(a+1)%e.length],i=h(t,f),x=h(s,t),r=c(s,t,f);return{...t,angle:r,offset:0,arc:{radius:n,hit:n},in:{length:x,rest:x},out:{length:i,rest:i},locked:!1,id:a,get prev(){return g[(a-1+e.length)%e.length]},get next(){return g[(a+1)%e.length]}}});for(g.forEach(t=>{t.arc.hit=Math.min(t.out.length/(t.angle.vel+t.next.angle.vel),t.in.length/(t.angle.vel+t.prev.angle.vel))});o;)g.sort(P),y(g[0],g,n);g.sort((t,a)=>t.id-a.id);const l=g.map((t,a)=>{const s=t.arc.radius/Math.sin(t.angle.main/2),f=t.arc.radius*t.angle.vel;return{x:t.x,y:t.y,angle:{main:t.angle.main,prev:t.angle.prev,next:t.angle.next,bis:t.angle.bis,dir:t.angle.dir},offset:f,arc:{radius:t.arc.radius,x:t.x+Math.cos(t.angle.bis)*s,y:t.y+Math.sin(t.angle.bis)*s},in:{length:t.in.length,x:t.x+Math.cos(t.angle.prev)*f,y:t.y+Math.sin(t.angle.prev)*f},out:{length:t.out.length,x:t.x+Math.cos(t.angle.next)*f,y:t.y+Math.sin(t.angle.next)*f},id:a,get prev(){return l[(a-1+e.length)%e.length]},get next(){return l[(a+1)%e.length]}}});return l},y=(e,n,g)=>{if(!e.locked){const l=n.find(a=>a.id===(e.id-1+n.length)%n.length),t=n.find(a=>a.id===(e.id+1)%n.length);if(g>=e.arc.hit)if(e.arc.hit===t.arc.hit){const a=n.find(i=>i.id===(l.id-1+n.length)%n.length),s=n.find(i=>i.id===(t.id+1)%n.length),f=n.find(i=>i.id===(s.id+1)%n.length);e.arc.radius=e.arc.hit,t.arc.radius=e.arc.hit,t.locked=!0,e.locked=!0,o-=2,e.offset=e.arc.radius*e.angle.vel,t.offset=t.arc.radius*t.angle.vel,s.in.rest-=t.offset,t.out.rest-=t.offset,t.in.rest-=t.offset,t.in.rest-=e.offset,e.out.rest-=e.offset,e.in.rest-=e.offset,l.out.rest-=e.offset,s.arc.hit=Math.min(s.out.length/(s.angle.vel+f.angle.vel),s.in.rest/s.angle.vel),l.arc.hit=Math.min(l.in.length/(l.angle.vel+a.angle.vel),l.out.rest/l.angle.vel)}else if(e.arc.hit===l.arc.hit){const a=n.find(i=>i.id===(t.id+1)%n.length),s=n.find(i=>i.id===(l.id-1+n.length)%n.length),f=n.find(i=>i.id===(s.id-1+n.length)%n.length);e.arc.radius=e.arc.hit,l.arc.radius=e.arc.hit,e.locked=!0,l.locked=!0,o-=2,e.offset=e.arc.radius*e.angle.vel,l.offset=l.arc.radius*l.angle.vel,s.out.rest-=l.offset,l.in.rest-=l.offset,l.out.rest-=l.offset,l.out.rest-=e.offset,e.in.rest-=e.offset,e.out.rest-=e.offset,t.in.rest-=e.offset,s.arc.hit=Math.min(s.in.length/(s.angle.vel+f.angle.vel),s.out.rest/s.angle.vel),t.arc.hit=Math.min(t.out.length/(t.angle.vel+a.angle.vel),t.in.rest/t.angle.vel)}else l.locked&&!t.locked&&(e.arc.radius=Math.min(e.in.rest/e.angle.vel,e.out.length/(e.angle.vel+t.angle.vel),e.arc.radius)),t.locked&&!l.locked&&(e.arc.radius=Math.min(e.out.rest/e.angle.vel,e.in.length/(e.angle.vel+l.angle.vel),e.arc.radius)),t.locked&&l.locked&&(e.arc.radius=Math.min(e.in.rest/e.angle.vel,e.out.rest/e.angle.vel,e.arc.radius)),e.offset=e.arc.radius*e.angle.vel,l.out.rest-=e.offset,e.in.rest-=e.offset,e.out.rest-=e.offset,t.in.rest-=e.offset,e.locked=!0,o--;else e.offset=e.arc.radius*e.angle.vel,l.out.rest-=e.offset,e.in.rest-=e.offset,e.out.rest-=e.offset,t.in.rest-=e.offset,e.locked=!0,o--}},P=(e,n)=>e.locked&&!n.locked?1:!e.locked&&n.locked?-1:e.locked&&n.locked?0:e.arc.hit-n.arc.hit;return m}();
//# sourceMappingURL=round-polygon.iife.js.map

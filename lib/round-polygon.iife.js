var roundPolygon=function(){"use strict";const s=(e,l)=>Math.sqrt(Math.pow(l.x-e.x,2)+Math.pow(l.y-e.y,2)),d=(e,l,n)=>{if(n){const a=s(e,l),o=s(l,n),i=s(n,e);return Math.acos((a*a+o*o-i*i)/(2*a*o))}else return Math.atan2(l.y-e.y,l.x-e.x)},f=Math.PI,P=f*2,c=(e,l)=>{const n=l-e;return n>f&&n<P||n<0&&n>-f?-1:1},L=(e,l,n)=>{const a=d(e,l,n),o=d(l,e),i=d(l,n),t=1/Math.tan(a/2),g=c(o,i),v=o+g*a/2;return{main:a,next:i,prev:o,vel:t,dir:g,bis:v}},b=(e,l=0)=>{const n=e.map((t,g)=>{const v=e[(g-1+e.length)%e.length],y=e[(g+1)%e.length],M=s(t,y),x=s(v,t),k=L(v,t,y),H=t.r!==void 0?Math.min(M/k.vel,x/k.vel,t.r):0;return{...t,angle:k,offset:0,arc:{radius:l,hit:l,lim:H},in:{length:x,rest:x},out:{length:M,rest:M},locked:!1,id:g,get prev(){return n[(g-1+e.length)%e.length]},get next(){return n[(g+1)%e.length]}}});n.forEach(t=>{t.arc.hit=Math.min(t.out.length/(t.angle.vel+t.next.angle.vel),t.in.length/(t.angle.vel+t.prev.angle.vel))});const a=n.filter(t=>t.arc.lim>0);if(a.length){let t=h(a);for(;t;)R(t),t=h(a)}if(n.filter(t=>t.arc.lim===0).length&&l>0){let t=h(n);for(;t;)w(t,l),t=h(n)}const i=n.map(t=>{const g=t.arc.radius/Math.sin(t.angle.main/2);return{id:t.id,x:t.x,y:t.y,angle:{main:t.angle.main,prev:t.angle.prev,next:t.angle.next,bis:t.angle.bis,dir:t.angle.dir},offset:t.offset,arc:{radius:t.arc.radius,x:t.x+Math.cos(t.angle.bis)*g,y:t.y+Math.sin(t.angle.bis)*g},in:{length:t.in.length,x:t.x+Math.cos(t.angle.prev)*t.offset,y:t.y+Math.sin(t.angle.prev)*t.offset},out:{length:t.out.length,x:t.x+Math.cos(t.angle.next)*t.offset,y:t.y+Math.sin(t.angle.next)*t.offset},get prev(){return i[(t.id-1+e.length)%e.length]},get next(){return i[(t.id+1)%e.length]}}});return i},R=e=>{const{prev:l,next:n}=e;l.locked&&!n.locked?e.arc.radius=Math.min(Math.max((e.out.length-n.arc.lim*n.angle.vel)/e.angle.vel,e.out.length/(e.angle.vel+n.angle.vel)),e.in.rest/e.angle.vel,e.arc.lim):n.locked&&!l.locked?e.arc.radius=Math.min(Math.max((e.in.length-l.arc.lim*l.angle.vel)/e.angle.vel,e.in.length/(e.angle.vel+l.angle.vel)),e.out.rest/e.angle.vel,e.arc.lim):n.locked&&l.locked?e.arc.radius=Math.min(e.in.rest/e.angle.vel,e.out.rest/e.angle.vel,e.arc.lim):e.arc.radius=Math.min(Math.max((e.in.length-l.arc.lim*l.angle.vel)/e.angle.vel,e.in.length/(e.angle.vel+l.angle.vel)),Math.max((e.out.length-n.arc.lim*n.angle.vel)/e.angle.vel,e.out.length/(e.angle.vel+n.angle.vel)),e.arc.lim),m(e)},w=(e,l)=>{if(l>e.arc.hit){const{prev:n,next:a}=e;n.locked&&!a.locked?e.arc.radius=Math.max(Math.min(e.in.rest/e.angle.vel,e.out.length/(e.angle.vel+a.angle.vel),e.arc.radius),0):a.locked&&!n.locked?e.arc.radius=Math.max(Math.min(e.out.rest/e.angle.vel,e.in.length/(e.angle.vel+n.angle.vel),e.arc.radius),0):a.locked&&n.locked?e.arc.radius=Math.max(Math.min(e.in.rest/e.angle.vel,e.out.rest/e.angle.vel,e.arc.radius),0):e.arc.radius=e.arc.hit,m(e)}else m(e)},m=e=>{const{prev:l,next:n}=e;e.offset=e.arc.radius*e.angle.vel,l.out.rest-=e.offset,e.in.rest-=e.offset,e.out.rest-=e.offset,n.in.rest-=e.offset,e.locked=!0,l.arc.hit=Math.min(l.in.length/(l.angle.vel+l.prev.angle.vel),l.in.rest/l.angle.vel,l.out.rest/l.angle.vel),n.arc.hit=Math.min(n.out.length/(n.angle.vel+n.next.angle.vel),n.out.rest/n.angle.vel,n.in.rest/n.angle.vel)},h=e=>e.reduce((l,n)=>n.locked?l:l?n.arc.hit<l.arc.hit?n:l:n,null);return b}();
